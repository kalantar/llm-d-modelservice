# This values.yaml file creates the resources for facebook/opt-125m

# When true, LeaderWorkerSet is used instead of Deployment
multinode: false

modelArtifacts:
# This is the model name used to start vLLM.
  uri: "hf://facebook/opt-125m"
  size: 20Gi

# Describe routing requirements. In addition to service level routing (OpenAI model name, service port)
# also describes elements for Gateway API Inference Extension configuration
routing:
  # This is the model name for the OpenAI request
  modelName: facebook/opt-125m
  servicePort: 8000   # Sidecar listens on this port for requests. If there's no sidecar, the request goes here
  proxy:
    image: ghcr.io/llm-d/llm-d-routing-sidecar:0.0.6
    targetPort: 8200
  parentRefs:
  - name: inference-gateway
  inferencePool:
    create: true
    # to use a different service than the one created when routing.epp.create: true
    # eppService: 
  httpRoute:
    create: true
    # to use a different inference pool than the one created when routing.inferencePoll.create: true
    # inferencePool:
    # to override matches defined when routing.httpRoute.create: true
    matches:
    - path:
        type: PathPrefix
        value: /
      headers:
  epp:
    create: true
    service:
      port: 9002
      targetPort: 9002
    # image: ghcr.io/llm-d/llm-d-inference-scheduler:0.0.3
    # replicas: 1
    # debugLevel: 4
    # disableReadinessProbe: false
    # disableLivenessProbe: false

# describe decode pods
decode:
  create: true
  enableService: false
  replicas: 1
  containers:
  - name: "vllm"
    image: "ghcr.io/llm-d/llm-d:0.0.8"
    modelCommand: vllmServe
    args:
      - "--enforce-eager"
      - "--kv-transfer-config"
      - '{"kv_connector":"NixlConnector", "kv_role":"kv_both"}'
    env:
      - name: CUDA_VISIBLE_DEVICES
        value: "0"
      - name: UCX_TLS
        value: "cuda_ipc,cuda_copy,tcp"
      - name: VLLM_NIXL_SIDE_CHANNEL_HOST
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
      - name: VLLM_NIXL_SIDE_CHANNEL_PORT
        value: "5557"
      - name: VLLM_LOGGING_LEVEL
        value: DEBUG
    ports:
      - containerPort: 5557
        protocol: TCP
    resources:
      limits:
        memory: 16Gi
        cpu: "16"
        nvidia.com/gpu: "1"
      requests:
        cpu: "16"
        memory: 16Gi
        nvidia.com/gpu: "1"
    mountModelVolume: true

# describe the prefill pods (looks the same as above)
prefill:
  create: true
  replicas: 1
  containers:
  - name: "vllm"
    image: "ghcr.io/llm-d/llm-d:0.0.8"
    modelCommand: vllmServe
    args:
      - "--enforce-eager"
      - "--kv-transfer-config"
      - '{"kv_connector":"NixlConnector", "kv_role":"kv_both"}'
    env:
      - name: CUDA_VISIBLE_DEVICES
        value: "0"
      - name: UCX_TLS
        value: "cuda_ipc,cuda_copy,tcp"
      - name: VLLM_NIXL_SIDE_CHANNEL_PORT
        value: "5557"
      - name: VLLM_NIXL_SIDE_CHANNEL_HOST
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
      - name: VLLM_LOGGING_LEVEL
        value: DEBUG
    ports:
      - containerPort: 8000
        protocol: TCP
      - containerPort: 5557
        protocol: TCP
    resources:
      limits:
        memory: 16Gi
        cpu: "16"
        nvidia.com/gpu: "1"
      requests:
        cpu: "16"
        memory: 16Gi
        nvidia.com/gpu: "1"
